/*
 * This file is generated by jOOQ.
 */
package ru.ashirobokov.library.jooq.tables.daos;


import java.util.List;


import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import ru.ashirobokov.library.jooq.tables.Authors;
import ru.ashirobokov.library.jooq.tables.records.AuthorsRecord;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthorsDao extends DAOImpl<AuthorsRecord, ru.ashirobokov.library.jooq.tables.pojos.Authors, Long> {

    /**
     * Create a new AuthorsDao without any configuration
     */
    public AuthorsDao() {
        super(Authors.AUTHORS, ru.ashirobokov.library.jooq.tables.pojos.Authors.class);
    }

    /**
     * Create a new AuthorsDao with an attached configuration
     */
    public AuthorsDao(Configuration configuration) {
        super(Authors.AUTHORS, ru.ashirobokov.library.jooq.tables.pojos.Authors.class, configuration);
    }

    @Override
    public Long getId(ru.ashirobokov.library.jooq.tables.pojos.Authors object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ru.ashirobokov.library.jooq.tables.pojos.Authors> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Authors.AUTHORS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<ru.ashirobokov.library.jooq.tables.pojos.Authors> fetchById(Long... values) {
        return fetch(Authors.AUTHORS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public ru.ashirobokov.library.jooq.tables.pojos.Authors fetchOneById(Long value) {
        return fetchOne(Authors.AUTHORS.ID, value);
    }

    /**
     * Fetch records that have <code>first_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ru.ashirobokov.library.jooq.tables.pojos.Authors> fetchRangeOfFirstName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Authors.AUTHORS.FIRST_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>first_name IN (values)</code>
     */
    public List<ru.ashirobokov.library.jooq.tables.pojos.Authors> fetchByFirstName(String... values) {
        return fetch(Authors.AUTHORS.FIRST_NAME, values);
    }

    /**
     * Fetch records that have <code>last_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ru.ashirobokov.library.jooq.tables.pojos.Authors> fetchRangeOfLastName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Authors.AUTHORS.LAST_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_name IN (values)</code>
     */
    public List<ru.ashirobokov.library.jooq.tables.pojos.Authors> fetchByLastName(String... values) {
        return fetch(Authors.AUTHORS.LAST_NAME, values);
    }
}
