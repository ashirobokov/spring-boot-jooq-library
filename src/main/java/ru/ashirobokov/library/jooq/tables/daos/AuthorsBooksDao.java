/*
 * This file is generated by jOOQ.
 */
package ru.ashirobokov.library.jooq.tables.daos;


import java.util.List;


import org.jooq.Configuration;
import org.jooq.Record2;
import org.jooq.impl.DAOImpl;

import ru.ashirobokov.library.jooq.tables.AuthorsBooks;
import ru.ashirobokov.library.jooq.tables.records.AuthorsBooksRecord;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthorsBooksDao extends DAOImpl<AuthorsBooksRecord, ru.ashirobokov.library.jooq.tables.pojos.AuthorsBooks, Record2<Long, Long>> {

    /**
     * Create a new AuthorsBooksDao without any configuration
     */
    public AuthorsBooksDao() {
        super(AuthorsBooks.AUTHORS_BOOKS, ru.ashirobokov.library.jooq.tables.pojos.AuthorsBooks.class);
    }

    /**
     * Create a new AuthorsBooksDao with an attached configuration
     */
    public AuthorsBooksDao(Configuration configuration) {
        super(AuthorsBooks.AUTHORS_BOOKS, ru.ashirobokov.library.jooq.tables.pojos.AuthorsBooks.class, configuration);
    }

    @Override
    public Record2<Long, Long> getId(ru.ashirobokov.library.jooq.tables.pojos.AuthorsBooks object) {
        return compositeKeyRecord(object.getAuthorId(), object.getBookId());
    }

    /**
     * Fetch records that have <code>author_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ru.ashirobokov.library.jooq.tables.pojos.AuthorsBooks> fetchRangeOfAuthorId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(AuthorsBooks.AUTHORS_BOOKS.AUTHOR_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>author_id IN (values)</code>
     */
    public List<ru.ashirobokov.library.jooq.tables.pojos.AuthorsBooks> fetchByAuthorId(Long... values) {
        return fetch(AuthorsBooks.AUTHORS_BOOKS.AUTHOR_ID, values);
    }

    /**
     * Fetch records that have <code>book_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ru.ashirobokov.library.jooq.tables.pojos.AuthorsBooks> fetchRangeOfBookId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(AuthorsBooks.AUTHORS_BOOKS.BOOK_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>book_id IN (values)</code>
     */
    public List<ru.ashirobokov.library.jooq.tables.pojos.AuthorsBooks> fetchByBookId(Long... values) {
        return fetch(AuthorsBooks.AUTHORS_BOOKS.BOOK_ID, values);
    }
}
