/*
 * This file is generated by jOOQ.
 */
package ru.ashirobokov.library.jooq.tables.daos;


import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import ru.ashirobokov.library.jooq.tables.Books;
import ru.ashirobokov.library.jooq.tables.records.BooksRecord;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BooksDao extends DAOImpl<BooksRecord, ru.ashirobokov.library.jooq.tables.pojos.Books, Long> {

    /**
     * Create a new BooksDao without any configuration
     */
    public BooksDao() {
        super(Books.BOOKS, ru.ashirobokov.library.jooq.tables.pojos.Books.class);
    }

    /**
     * Create a new BooksDao with an attached configuration
     */
    public BooksDao(Configuration configuration) {
        super(Books.BOOKS, ru.ashirobokov.library.jooq.tables.pojos.Books.class, configuration);
    }

    @Override
    public Long getId(ru.ashirobokov.library.jooq.tables.pojos.Books object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ru.ashirobokov.library.jooq.tables.pojos.Books> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Books.BOOKS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<ru.ashirobokov.library.jooq.tables.pojos.Books> fetchById(Long... values) {
        return fetch(Books.BOOKS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public ru.ashirobokov.library.jooq.tables.pojos.Books fetchOneById(Long value) {
        return fetchOne(Books.BOOKS.ID, value);
    }

    /**
     * Fetch records that have <code>title BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ru.ashirobokov.library.jooq.tables.pojos.Books> fetchRangeOfTitle(String lowerInclusive, String upperInclusive) {
        return fetchRange(Books.BOOKS.TITLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>title IN (values)</code>
     */
    public List<ru.ashirobokov.library.jooq.tables.pojos.Books> fetchByTitle(String... values) {
        return fetch(Books.BOOKS.TITLE, values);
    }
}
