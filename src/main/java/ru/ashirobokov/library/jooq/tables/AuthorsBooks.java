/*
 * This file is generated by jOOQ.
 */
package ru.ashirobokov.library.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.ashirobokov.library.jooq.BookLibrary;
import ru.ashirobokov.library.jooq.Indexes;
import ru.ashirobokov.library.jooq.Keys;
import ru.ashirobokov.library.jooq.tables.records.AuthorsBooksRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthorsBooks extends TableImpl<AuthorsBooksRecord> {

    private static final long serialVersionUID = 1424416656;

    /**
     * The reference instance of <code>book_library.authors_books</code>
     */
    public static final AuthorsBooks AUTHORS_BOOKS = new AuthorsBooks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuthorsBooksRecord> getRecordType() {
        return AuthorsBooksRecord.class;
    }

    /**
     * The column <code>book_library.authors_books.author_id</code>.
     */
    public final TableField<AuthorsBooksRecord, Long> AUTHOR_ID = createField(DSL.name("author_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>book_library.authors_books.book_id</code>.
     */
    public final TableField<AuthorsBooksRecord, Long> BOOK_ID = createField(DSL.name("book_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>book_library.authors_books</code> table reference
     */
    public AuthorsBooks() {
        this(DSL.name("authors_books"), null);
    }

    /**
     * Create an aliased <code>book_library.authors_books</code> table reference
     */
    public AuthorsBooks(String alias) {
        this(DSL.name(alias), AUTHORS_BOOKS);
    }

    /**
     * Create an aliased <code>book_library.authors_books</code> table reference
     */
    public AuthorsBooks(Name alias) {
        this(alias, AUTHORS_BOOKS);
    }

    private AuthorsBooks(Name alias, Table<AuthorsBooksRecord> aliased) {
        this(alias, aliased, null);
    }

    private AuthorsBooks(Name alias, Table<AuthorsBooksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> AuthorsBooks(Table<O> child, ForeignKey<O, AuthorsBooksRecord> key) {
        super(child, key, AUTHORS_BOOKS);
    }

    @Override
    public Schema getSchema() {
        return BookLibrary.BOOK_LIBRARY;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.AUTHORS_BOOKS_FK_BOOK_IN_AUTHOR_BOOK, Indexes.AUTHORS_BOOKS_PRIMARY);
    }

    @Override
    public UniqueKey<AuthorsBooksRecord> getPrimaryKey() {
        return Keys.KEY_AUTHORS_BOOKS_PRIMARY;
    }

    @Override
    public List<UniqueKey<AuthorsBooksRecord>> getKeys() {
        return Arrays.<UniqueKey<AuthorsBooksRecord>>asList(Keys.KEY_AUTHORS_BOOKS_PRIMARY);
    }

    @Override
    public List<ForeignKey<AuthorsBooksRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AuthorsBooksRecord, ?>>asList(Keys.FK_AUTHOR_IN_AUTHOR_BOOK, Keys.FK_BOOK_IN_AUTHOR_BOOK);
    }

    public Authors authors() {
        return new Authors(this, Keys.FK_AUTHOR_IN_AUTHOR_BOOK);
    }

    public Books books() {
        return new Books(this, Keys.FK_BOOK_IN_AUTHOR_BOOK);
    }

    @Override
    public AuthorsBooks as(String alias) {
        return new AuthorsBooks(DSL.name(alias), this);
    }

    @Override
    public AuthorsBooks as(Name alias) {
        return new AuthorsBooks(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthorsBooks rename(String name) {
        return new AuthorsBooks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthorsBooks rename(Name name) {
        return new AuthorsBooks(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
